{
  "name": "action-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { motion, AnimatePresence } from \"motion/react\";\r\nimport {\r\n    Search,\r\n    Send,\r\n    BarChart2,\r\n    Globe,\r\n    Video,\r\n    PlaneTakeoff,\r\n    AudioLines,\r\n    Layout,\r\n    LayoutGrid,\r\n} from \"lucide-react\";\r\nimport useDebounce from \"@/hooks/use-debounce\";\r\n\r\ninterface Action {\r\n    id: string;\r\n    label: string;\r\n    icon: React.ReactNode;\r\n    description?: string;\r\n    short?: string;\r\n    end?: string;\r\n}\r\n\r\ninterface SearchResult {\r\n    actions: Action[];\r\n}\r\n\r\nconst allActionsSample = [\r\n    {\r\n        id: \"1\",\r\n        label: \"Book tickets\",\r\n        icon: <PlaneTakeoff className=\"h-4 w-4 text-blue-500\" />,\r\n        description: \"Operator\",\r\n        short: \"⌘K\",\r\n        end: \"Agent\",\r\n    },\r\n    {\r\n        id: \"2\",\r\n        label: \"Summarize\",\r\n        icon: <BarChart2 className=\"h-4 w-4 text-orange-500\" />,\r\n        description: \"gpt-4o\",\r\n        short: \"⌘cmd+p\",\r\n        end: \"Command\",\r\n    },\r\n    {\r\n        id: \"3\",\r\n        label: \"Screen Studio\",\r\n        icon: <Video className=\"h-4 w-4 text-purple-500\" />,\r\n        description: \"gpt-4o\",\r\n        short: \"\",\r\n        end: \"Application\",\r\n    },\r\n    {\r\n        id: \"4\",\r\n        label: \"Talk to Jarvis\",\r\n        icon: <AudioLines className=\"h-4 w-4 text-green-500\" />,\r\n        description: \"gpt-4o voice\",\r\n        short: \"\",\r\n        end: \"Active\",\r\n    },\r\n    {\r\n        id: \"5\",\r\n        label: \"Kokonut UI - Pro\",\r\n        icon: <LayoutGrid className=\"h-4 w-4 text-blue-500\" />,\r\n        description: \"Components\",\r\n        short: \"\",\r\n        end: \"Link\",\r\n    },\r\n];\r\n\r\nfunction ActionSearchBar({\r\n    actions = allActionsSample,\r\n    defaultOpen = false,\r\n}: {\r\n    actions?: Action[];\r\n    defaultOpen?: boolean;\r\n}) {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [result, setResult] = useState<SearchResult | null>(null);\r\n    const [isFocused, setIsFocused] = useState(defaultOpen);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [selectedAction, setSelectedAction] = useState<Action | null>(null);\r\n    const debouncedQuery = useDebounce(query, 200);\r\n\r\n    useEffect(() => {\r\n        if (!isFocused) {\r\n            setResult(null);\r\n            return;\r\n        }\r\n\r\n        if (!debouncedQuery) {\r\n            setResult({ actions: actions });\r\n            return;\r\n        }\r\n\r\n        const normalizedQuery = debouncedQuery.toLowerCase().trim();\r\n        const filteredActions = actions.filter((action) => {\r\n            const searchableText = action.label.toLowerCase();\r\n            return searchableText.includes(normalizedQuery);\r\n        });\r\n\r\n        setResult({ actions: filteredActions });\r\n    }, [debouncedQuery, isFocused, actions]);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setQuery(e.target.value);\r\n        setIsTyping(true);\r\n    };\r\n\r\n    const container = {\r\n        hidden: { opacity: 0, height: 0 },\r\n        show: {\r\n            opacity: 1,\r\n            height: \"auto\",\r\n            transition: {\r\n                height: {\r\n                    duration: 0.4,\r\n                },\r\n                staggerChildren: 0.1,\r\n            },\r\n        },\r\n        exit: {\r\n            opacity: 0,\r\n            height: 0,\r\n            transition: {\r\n                height: {\r\n                    duration: 0.3,\r\n                },\r\n                opacity: {\r\n                    duration: 0.2,\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    const item = {\r\n        hidden: { opacity: 0, y: 20 },\r\n        show: {\r\n            opacity: 1,\r\n            y: 0,\r\n            transition: {\r\n                duration: 0.3,\r\n            },\r\n        },\r\n        exit: {\r\n            opacity: 0,\r\n            y: -10,\r\n            transition: {\r\n                duration: 0.2,\r\n            },\r\n        },\r\n    };\r\n\r\n    const handleFocus = () => {\r\n        setSelectedAction(null);\r\n        setIsFocused(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full max-w-xl mx-auto\">\r\n            <div className=\"relative flex flex-col justify-start items-center min-h-[300px]\">\r\n                <div className=\"w-full max-w-sm sticky top-0 bg-background z-10 pt-4 pb-1\">\r\n                    <label\r\n                        className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1 block\"\r\n                        htmlFor=\"search\"\r\n                    >\r\n                        Search Commands\r\n                    </label>\r\n                    <div className=\"relative\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder=\"What's up?\"\r\n                            value={query}\r\n                            onChange={handleInputChange}\r\n                            onFocus={handleFocus}\r\n                            onBlur={() =>\r\n                                setTimeout(() => setIsFocused(false), 200)\r\n                            }\r\n                            className=\"pl-3 pr-9 py-1.5 h-9 text-sm rounded-lg focus-visible:ring-offset-0\"\r\n                        />\r\n                        <div className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4\">\r\n                            <AnimatePresence mode=\"popLayout\">\r\n                                {query.length > 0 ? (\r\n                                    <motion.div\r\n                                        key=\"send\"\r\n                                        initial={{ y: -20, opacity: 0 }}\r\n                                        animate={{ y: 0, opacity: 1 }}\r\n                                        exit={{ y: 20, opacity: 0 }}\r\n                                        transition={{ duration: 0.2 }}\r\n                                    >\r\n                                        <Send className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\r\n                                    </motion.div>\r\n                                ) : (\r\n                                    <motion.div\r\n                                        key=\"search\"\r\n                                        initial={{ y: -20, opacity: 0 }}\r\n                                        animate={{ y: 0, opacity: 1 }}\r\n                                        exit={{ y: 20, opacity: 0 }}\r\n                                        transition={{ duration: 0.2 }}\r\n                                    >\r\n                                        <Search className=\"w-4 h-4 text-gray-400 dark:text-gray-500\" />\r\n                                    </motion.div>\r\n                                )}\r\n                            </AnimatePresence>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"w-full max-w-sm\">\r\n                    <AnimatePresence>\r\n                        {isFocused && result && !selectedAction && (\r\n                            <motion.div\r\n                                className=\"w-full border rounded-md shadow-xs overflow-hidden dark:border-gray-800 bg-white dark:bg-black mt-1\"\r\n                                variants={container}\r\n                                initial=\"hidden\"\r\n                                animate=\"show\"\r\n                                exit=\"exit\"\r\n                            >\r\n                                <motion.ul>\r\n                                    {result.actions.map((action) => (\r\n                                        <motion.li\r\n                                            key={action.id}\r\n                                            className=\"px-3 py-2 flex items-center justify-between hover:bg-gray-200 dark:hover:bg-zinc-900  cursor-pointer rounded-md\"\r\n                                            variants={item}\r\n                                            layout\r\n                                            onClick={() =>\r\n                                                setSelectedAction(action)\r\n                                            }\r\n                                        >\r\n                                            <div className=\"flex items-center gap-2 justify-between\">\r\n                                                <div className=\"flex items-center gap-2\">\r\n                                                    <span className=\"text-gray-500\">\r\n                                                        {action.icon}\r\n                                                    </span>\r\n                                                    <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                                                        {action.label}\r\n                                                    </span>\r\n                                                    <span className=\"text-xs text-gray-400\">\r\n                                                        {action.description}\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"flex items-center gap-2\">\r\n                                                <span className=\"text-xs text-gray-400\">\r\n                                                    {action.short}\r\n                                                </span>\r\n                                                <span className=\"text-xs text-gray-400 text-right\">\r\n                                                    {action.end}\r\n                                                </span>\r\n                                            </div>\r\n                                        </motion.li>\r\n                                    ))}\r\n                                </motion.ul>\r\n                                <div className=\"mt-2 px-3 py-2 border-t border-gray-100 dark:border-gray-800\">\r\n                                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\r\n                                        <span>Press ⌘K to open commands</span>\r\n                                        <span>ESC to cancel</span>\r\n                                    </div>\r\n                                </div>\r\n                            </motion.div>\r\n                        )}\r\n                    </AnimatePresence>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ActionSearchBar;\r\n",
      "path": "/components/kokonutui/action-search-bar.tsx",
      "target": "/components/kokonutui/action-search-bar.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useState } from \"react\";\r\n\r\nfunction useDebounce<T>(value: T, delay: number = 500): T {\r\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setDebouncedValue(value);\r\n        }, delay);\r\n\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [value, delay]);\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;\r\n",
      "path": "/hooks/use-debounce.ts",
      "target": "/hooks/use-debounce.ts"
    }
  ]
}